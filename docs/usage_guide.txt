دليل استخدام Kimi AI PHP Client
================================

1. المقدمة
---------
مكتبة PHP للتعامل مع واجهة برمجة تطبيقات Kimi AI، تدعم نماذج متعددة مثل:
- DeepSeek-R1
- Llama 3.3 70B Instruct
- Llama 3.2 11B Vision (يدعم الصور)
- Mistral 7B Instruct v0.3
- Kimi K2 Chat

2. التثبيت
---------
```bash
composer require mohzubiri/php-kimi-ai
```

3. الاستخدام مع PHP عادي
----------------------

### 2.1 الإعداد الأساسي
```php
<?php
require 'vendor/autoload.php';

use KimiAI\KimiAIClient;
use KimiAI\Enums\Models;

// إنشاء العميل
$client = KimiAIClient::build('YOUR_API_KEY');
```

### 2.2 إرسال استعلام بسيط
```php
$response = $client
    ->withModel(Models::K2_CHAT->value)
    ->query('مرحباً، كيف يمكنك مساعدتي اليوم؟')
    ->run();

echo $response;
```

### 2.3 إرسال استعلام مع معلمات متقدمة
```php
$response = $client
    ->withModel(Models::K2_CHAT->value)
    ->setTemperature(0.7)
    ->setMaxTokens(1000)
    ->query('اكتب قصة قصيرة عن الذكاء الاصطناعي')
    ->run();
```

### 2.4 استخدام الدوال المخصصة (Function Calling)
```php
// تعريف الدالة
$getWeather = function(array $args) {
    $location = $args['location'] ?? 'غير معروف';
    return "الطقس في $location مشمس";
};

// إرسال الاستعلام مع الدالة
$response = $client
    ->withFunction(
        $getWeather,
        'get_weather',
        'الحصول على حالة الطقس في موقع معين',
        [
            'type' => 'object',
            'properties' => [
                'location' => [
                    'type' => 'string',
                    'description' => 'المدينة أو الموقع',
                ]
            ],
            'required' => ['location']
        ]
    )
    ->query('ما هو الطقس في بغداد؟')
    ->run();
```

### 2.5 استخدام التدفق (Streaming)
```php
$client
    ->withStreaming(function($chunk) {
        echo $chunk;
        flush();
    })
    ->query('اشرح لي كيف يعمل الذكاء الاصطناعي')
    ->run();
```

4. معالجة الصور والملفات
----------------------

### 4.1 تحليل الصور
```php
use KimiAI\KimiAIClient;
use KimiAI\Enums\Models;
use KimiAI\Attachment;

$response = KimiAIClient::build('YOUR_API_KEY')
    ->withModel(Models::LLAMA_3_2_11B_VISION->value)
    ->query('ما الذي تراه في هذه الصورة؟', [
        Attachment::fromPath('path/to/image.jpg', 'وصف للصورة')
    ])
    ->run();
```

### 4.2 معالجة المستندات
```php
$response = $client
    ->withModel(Models::LLAMA_3_2_11B_VISION->value)
    ->query('لخص هذا المستند', [
        Attachment::fromPath('document.pdf', 'مستند PDF')
    ])
    ->run();
```

### 4.3 دعم تنسيقات متعددة
- الصور: JPG, PNG, GIF, WEBP
- المستندات: PDF, DOCX, TXT

5. الاستخدام مع Laravel
----------------------

### 3.1 الإعداد
أضف المفتاح السري إلى ملف `.env`:
```env
KIMI_AI_API_KEY=your_api_key_here
KIMI_AI_BASE_URL=https://api.kimi.ai/v2
KIMI_AI_TIMEOUT=30
```

### 3.2 الاستخدام مع الفاساد (Facade)
```php
use KimiAI\Laravel\Facades\KimiAI;

class YourController extends Controller
{
    public function ask()
    {
        $response = KimiAI::query('كيف حالك اليوم؟')->run();
        return view('response', ['response' => $response]);
    }
}
```

### 3.3 استخدام دالة المساعدة (Helper)
```php
// في أي مكان بالتطبيق
$response = kimi_ai()
    ->withModel(\KimiAI\Enums\Models::K2_CHAT->value)
    ->query('ساعدني في كتابة رسالة')
    ->run();
```

6. النماذج المتقدمة
------------------

### 6.1 استخدام DeepSeek-R1
```php
$response = $client
    ->withModel(Models::DEEPSEEK_R1->value)
    ->setSystemPrompt('أنت مساعد ذكاء اصطناعي متخصص في البرمجة')
    ->query('كيف يمكنني تحسين أداء تطبيق PHP؟')
    ->run();
```

### 6.2 استخدام Llama 3.3 70B
```php
$response = $client
    ->withModel(Models::LLAMA_3_3_70B->value)
    ->setTemperature(0.7)
    ->setMaxTokens(2000)
    ->query('اكتب مقالاً عن مستقبل الذكاء الاصطناعي')
    ->run();
```

7. معالجة الأخطاء
----------------
```php
try {
    $response = $client
        ->query('استعلام خاطئ')
        ->run();
} catch (\KimiAI\Exceptions\KimiAIException $e) {
    echo 'حدث خطأ: ' . $e->getMessage();
}
```

8. أمثلة متقدمة
-------------

### 8.1 محادثة متعددة الجولات
```php
// الجولة الأولى
$client->addMessage('user', 'مرحباً، أنا محمد');

// الجولة الثانية
$response = $client
    ->addMessage('user', 'ما هو اسمي؟')
    ->run();

echo $response; // يجب أن يذكر اسمك
```

### 8.2 استخدام الدفق (Streaming)
```php
$client
    ->withModel(Models::MISTRAL_7B->value)
    ->withStreaming(function($chunk) {
        echo $chunk;
        flush();
    })
    ->query('اشرح كيف يعمل الذكاء الاصطناعي')
    ->run();
```

### 8.3 تكوين مخصص
```php
$client = KimiAIClient::build(
    apiKey: 'your-api-key',
    baseUrl: 'https://custom-api-url.com',
    timeout: 60 // ثانية
);
```

9. أفضل الممارسات
----------------
- استخدم `setSystemPrompt` لتوجيه سلوك النموذج
- استخدم `setTemperature` للتحكم في الإبداع (0-2)
- استخدم `setMaxTokens` للتحكم في طول الإجابة
- استخدم `withStreaming` للردود الطويلة
- تأكد من أن الملفات المرفقة لا تتجاوز الحد المسموح

10. الملاحظات المهمة
-----------------
- تأكد من تحديث الباكج باستمرار للحصول على أحدث الميزات والإصلاحات
- استخدم المتغيرات البيئية لحفظ المفاتيح السرية
- تأكد من معالجة الأخطاء بشكل صحيح في التطبيقات الإنتاجية

11. الدعم
-------
لأي استفسارات أو مشاكل، يرجى فتح Issue في مستودع GitHub:
https://github.com/MohZubiri/PHP-KIMI-AI/issues

12. أمثلة إضافية
---------------
يمكنك العثور على المزيد من الأمثلة في مجلد `docs/advanced_examples.php`
